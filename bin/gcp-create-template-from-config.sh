#!/bin/bash
# gcp-create-template-from-config.sh
# ü™Ñ –°—Ç–≤–æ—Ä—é—î Instance Template —ñ–∑ JSON-–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# –î–≤–∞ —Ä–µ–∂–∏–º–∏: —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π (default) —Ç–∞ single (–¥–ª—è —à–∞–±–ª–æ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó VM)

set -euo pipefail
IFS=$'\n\t'

# ====== –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –ª–æ–≥—ñ–≤ ======
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

log()   { echo -e "${GREEN}[‚úî]${NC} $*"; }
warn()  { echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $*"; }
error() { echo -e "${RED}[‚úñ]${NC} $*" >&2; exit 1; }

# ====== Cleanup ======
cleanup() {
  if [[ -f "${TMP_JSON:-}" ]]; then
    rm -f "$TMP_JSON"
    log "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª $TMP_JSON –≤–∏–¥–∞–ª–µ–Ω–æ"
  fi
}

trap cleanup EXIT

# ====== –ê—Ä–≥—É–º–µ–Ω—Ç–∏ ======
SINGLE_MODE=0
SINGLE_MODE_NEW_DISK=0

for arg in "$@"; do
  case $arg in
    --config=*) CONFIG_JSON="${arg#*=}" ;;
    --template=*) TEMPLATE_NAME="${arg#*=}" ;;
    --project=*) PROJECT="${arg#*=}" ;;
	--zone=*) ZONE="${arg#*=}" ;;
    --os-image=*) OS_IMAGE_OVERRIDE="${arg#*=}" ;;
    --log-file=*) LOG_FILE="${arg#*=}" ;;
    --single|--single-instance) SINGLE_MODE=1 ;;
    *) error "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg" ;;
  esac
done

[[ -z "${CONFIG_JSON:-}" ]] && error "‚ùå –í–∫–∞–∂—ñ—Ç—å --config=path/to/config.json"
[[ ! -f "$CONFIG_JSON" ]] && error "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $CONFIG_JSON"

PROJECT="${PROJECT:-$(gcloud config get-value project 2>/dev/null || echo "")}"
[[ -z "$PROJECT" ]] && error "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç —ñ –Ω–µ –∑–∞–¥–∞–Ω–æ —É gcloud config"
ZONE="${ZONE:-$(gcloud config get-value compute/zone 2>/dev/null || echo "")}"
[[ -z "$ZONE" ]] && error "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–æ–Ω—É —ñ –Ω–µ –∑–∞–¥–∞–Ω–æ —É gcloud config"

if [[ -n "${LOG_FILE:-}" ]]; then
  exec > >(tee -a "$LOG_FILE") 2>&1
fi

if (( SINGLE_MODE == 0 )); then
	IS_NEW_DISK=1
fi

# ====== –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ CLI –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ ======
log "üì• –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ CLI –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–∑ gcloud..."
ALLOWED_CLI_PARAMS=$(gcloud compute instance-templates create --help \
  | grep -Eo -- '--[a-zA-Z0-9\-]+' \
  | sed 's/^--//' | sort -u)

# ====== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ======

# –í–∏—Ç—è–≥—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è –∑ URL, —è–∫—â–æ —Ü–µ URL
short_name() {
  local url="$1"
  if [[ "$url" =~ /([^/]+)$ ]]; then
    echo "${BASH_REMATCH[1]}"
  else
    echo "$url"
  fi
}

# –ö–æ–Ω–≤–µ—Ä—Ç—É—î boolean automaticRestart –≤ maintenance-policy
get_maintenance_policy() {
  local ar="$1"
  # —É JSON true –æ–∑–Ω–∞—á–∞—î MIGRATE, false - TERMINATE
  if [[ "$ar" == "true" ]]; then
    echo "MIGRATE"
  else
    echo "TERMINATE"
  fi
}

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è metadata/labels —É CLI —Ñ–æ—Ä–º–∞—Ç
format_key_value_list() {
  # $1 - JSON –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –≤–∏–¥—É {"key": "...", "value": "..."} –∞–±–æ —Å–ª–æ–≤–Ω–∏–∫
  local json_val="$1"
  echo "$json_val" | jq -r '
    if type=="array" then
      map("\(.key)=\(.value|tostring)") | join(",")
    else
      to_entries | map("\(.key)=\(.value|tostring)") | join(",")
    end
  '
}

# –ê–≤—Ç–æ-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
auto_format_value() {
  local val="$1"
  local cli_param="$2"
  local t=$(echo "$val" | jq -r 'type')

  case "$cli_param" in
    tags|scopes)
      echo "$val" | jq -r '. | join(",")'
      ;;
    metadata|labels)
      echo "$val" | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join(",")'
      ;;
    *)
      case "$t" in
        string|number|boolean) echo "$val" | jq -r '.' ;;
        array) echo "$val" | jq -r '. | join(",")' ;;
        object)
          echo "$val" | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join(",")'
          ;;
        *) warn "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–ª—è $cli_param: $t"; echo "$val" | jq -r '.' ;;
      esac
      ;;
  esac
}

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SINGLE_MODE –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –¥–∏—Å–∫–∞ ======
if (( SINGLE_MODE == 1 )); then
  disk_uri=$(jq -r '.disks[0].source // empty' "$CONFIG_JSON")
  if [[ -n "$disk_uri" ]]; then
    disk_project=$(echo "$disk_uri" | awk -F/ '{print $4}')
    disk_zone=$(echo "$disk_uri" | awk -F/ '{print $6}')
    disk_name=$(echo "$disk_uri" | awk -F/ '{print $8}')

    log "‚ÑπÔ∏è –î–∏—Å–∫ —É JSON: $disk_name (–ø—Ä–æ–µ–∫—Ç: $disk_project, –∑–æ–Ω–∞: $disk_zone)"
    log "‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–∞: –ø—Ä–æ–µ–∫—Ç=$PROJECT –∑–æ–Ω–∞=$ZONE"

    if [[ "$disk_project" != "$PROJECT" || "$disk_zone" != "$ZONE" ]]; then
      warn "‚ö†Ô∏è –î–∏—Å–∫ —É —ñ–Ω—à–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ/–∑–æ–Ω—ñ. –¢–æ–º—É –¥–∏—Å–∫ –±—É–¥–µ –Ω–æ–≤–∏–π."
      IS_NEW_DISK=1
    else
      log "‚úÖ –î–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É –ø—Ä–æ–µ–∫—Ç—ñ/–∑–æ–Ω—ñ."
    fi
  else
    warn "‚ö†Ô∏è –£ JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ disks[0].source. –¢–æ–º—É –¥–∏—Å–∫ –±—É–¥–µ –Ω–æ–≤–∏–π."
    IS_NEW_DISK=1
  fi
fi

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –¥–∏—Å–∫ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
if (( IS_NEW_DISK == 1 )); then
  has_disk_source=$(jq -r '.disks[0].source // empty' "$CONFIG_JSON")
  if [[ -n "$has_disk_source" ]]; then
    log "‚ÑπÔ∏è –í–∏—è–≤–ª–µ–Ω–æ .disks[0].source, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ initializeParams"
    # –ó–∞–º—ñ–Ω–∏–º–æ –≤ JSON –≤—Ö—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è image, diskSizeGb, diskType –∑ initializeParams
    # –©–æ–± —É —Å–∫—Ä–∏–ø—Ç—ñ –Ω–µ –º—ñ–Ω—è—Ç–∏, –ø–µ—Ä–µ–ø–∏—à–µ–º–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
	TMP_JSON=$(mktemp)
    jq '
      .disks[0] |=
        (. + {
          "initializeParams": {
            "sourceImage": (.initializeParams.sourceImage // ""),
            "diskSizeGb": (.initializeParams.diskSizeGb // ""),
            "diskType": (.initializeParams.diskType // "")
          }
        }) |
      del(.disks[0].source)
    ' "$CONFIG_JSON" > "$TMP_JSON"
    CONFIG_JSON="$TMP_JSON"
  fi
fi

# ====== JSON_MAP: CLI ‚Üí JSON –∫–ª—é—á ======
declare -A JSON_MAP=(
  ["machine-type"]="machineType"
  ["image"]="disks[0].initializeParams.sourceImage"
  ["boot-disk-size"]="disks[0].initializeParams.diskSizeGb"
  ["boot-disk-type"]="disks[0].initializeParams.diskType"
  ["tags"]="tags.items"
  ["metadata"]="metadata.items"
  ["labels"]="labels"
  ["network"]="networkInterfaces[0].network"
  ["subnet"]="networkInterfaces[0].subnetwork"
  ["deletion-protection"]="deletionProtection"
  ["service-account"]="serviceAccounts[0].email"
  ["scopes"]="serviceAccounts[0].scopes"
  ["preemptible"]="scheduling.preemptible"
  ["maintenance-policy"]="scheduling.automaticRestart"
)

# ====== –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ======
ARGS=()

for cli_param in $ALLOWED_CLI_PARAMS; do
  json_key="${JSON_MAP[$cli_param]:-}"

  # –ê–≤—Ç–æ-–ø–æ—à—É–∫ JSON –∫–ª—é—á–∞, —è–∫—â–æ –Ω–µ–º–∞—î —É –º–∞–ø—ñ
  if [[ -z "$json_key" ]]; then
    json_key_guess=$(echo "$cli_param" | tr '-' '.')
    raw_guess=$(jq -c ".${json_key_guess} // empty" "$CONFIG_JSON")
    if [[ -n "$raw_guess" && "$raw_guess" != "null" ]]; then
      warn "‚ö†Ô∏è –ê–≤—Ç–æ-–≤–∏—è–≤–ª–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${json_key_guess} –¥–ª—è --${cli_param}"
      json_key="$json_key_guess"
    fi
  fi

  if [[ -n "$json_key" ]]; then
    raw_value=$(jq -c ".${json_key} // empty" "$CONFIG_JSON")
    if [[ -n "$raw_value" && "$raw_value" != "null" ]]; then

      # —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó
      case "$cli_param" in
          machine-type|network|subnet)
            short=$(jq -r ".${json_key}" "$CONFIG_JSON" | xargs -n1 short_name)
            formatted_value="$short"
            ;;
          maintenance-policy)
            raw_bool=$(jq -r ".${json_key}" "$CONFIG_JSON")
            formatted_value=$(get_maintenance_policy "$raw_bool")
            ;;
          tags|scopes)
            formatted_value=$(echo "$raw_value" | jq -r '. | join(",")')
            ;;
          metadata|labels)
            formatted_value=$(format_key_value_list "$raw_value")
            ;;
          *)
            formatted_value=$(auto_format_value "$raw_value" "$cli_param")
            ;;
      esac

      ARGS+=("--${cli_param}=${formatted_value}")
      log "‚úÖ --${cli_param}=${formatted_value}"
    else
      log "‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ --${cli_param}: –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î —É JSON"
    fi
  else
    warn "‚ö†Ô∏è --${cli_param}: –Ω–µ–º–∞—î –º–∞–ø—ñ–Ω–≥—É —ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ-–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —É JSON"
  fi
done

# ====== –î–æ–¥–∞—î–º–æ OS image, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ======
if (( IS_NEW_DISK == 1 )); then
  OS_IMAGE=$(jq -r '.disks[0].initializeParams.sourceImage // empty' "$CONFIG_JSON")
  if [[ -n "${OS_IMAGE_OVERRIDE:-}" ]]; then
    OS_IMAGE="$OS_IMAGE_OVERRIDE"
  fi
  if [[ -z "$OS_IMAGE" ]]; then
    OS_IMAGE="projects/debian-cloud/global/images/family/debian-12"
    warn "‚ö†Ô∏è –û–±—Ä–∞–∑ –û–° –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç: $OS_IMAGE"
  fi

  if ! printf '%s\n' "${ARGS[@]}" | grep -q -- '--image='; then
    ARGS+=("--image=${OS_IMAGE}")
    log "üü¢ –î–æ–¥–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π --image=${OS_IMAGE}"
  fi
else
  log "‚ÑπÔ∏è –†–µ–∂–∏–º single: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è --image, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–∏—Å–∫ –≤–∂–µ —ñ—Å–Ω—É—î"
fi

# ====== –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É ======
VM_NAME=$(jq -r '.name' "$CONFIG_JSON")
if [[ -z "${TEMPLATE_NAME:-}" ]]; then
  DATE=$(date +'%Y-%m-%d-%H-%M-%S')
  TEMPLATE_NAME="${VM_NAME}-template-${DATE}"
fi

log "üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ —à–∞–±–ª–æ–Ω: $TEMPLATE_NAME"
log "üì¶ –ü—Ä–æ—î–∫—Ç: $PROJECT"

# ====== –í–∏–∫–ª–∏–∫–∞—î–º–æ gcloud ======
gcloud compute instance-templates create "$TEMPLATE_NAME" \
  --project="$PROJECT" \
  "${ARGS[@]}" || error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω"

log "‚úÖ –®–∞–±–ª–æ–Ω '$TEMPLATE_NAME' —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"