#!/bin/bash
# gcp-create-instance.sh
# ü™Ñ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è:
# ‚úÖ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è VM –∞–±–æ Instance Template
# ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è VM –∑—ñ —à–∞–±–ª–æ–Ω—É
# ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è VM –∞–±–æ —à–∞–±–ª–æ–Ω—É –∑ JSON-–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó VM –∞–±–æ —à–∞–±–ª–æ–Ω—É
# ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ override –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (machine-type, tags, metadata...)
# ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–µ–∂–∏–º—ñ–≤ single/universal –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
# –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î gcp-create-template-from-config.sh

set -euo pipefail
IFS=$'\n\t'

# ====== –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –ª–æ–≥—ñ–≤ ======
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

log()   { echo -e "${GREEN}[‚úî]${NC} $*"; }
warn()  { echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $*"; }
error() { echo -e "${RED}[‚úñ]${NC} $*" >&2; exit 1; }

# ====== Cleanup ======
cleanup() {
  
  # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π JSON —è–∫—â–æ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏
  if [[ -f "${TMP_JSON:-}" ]]; then
    rm -f "$TMP_JSON"
    log "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª $TMP_JSON –≤–∏–¥–∞–ª–µ–Ω–æ"
  fi
  
  # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —à–∞–±–ª–æ–Ω —è–∫—â–æ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏
  if [[ -n "${TMP_TEMPLATE:-}" && "${TMP_TEMPLATE_CREATED:-}" -eq 1 ]]; then
    log "üßπ –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —à–∞–±–ª–æ–Ω '$TMP_TEMPLATE'..."
    set +e
    gcloud compute instance-templates delete "$TMP_TEMPLATE" --quiet --project="$PROJECT"
    if [[ $? -ne 0 ]]; then
      warn "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —à–∞–±–ª–æ–Ω"
    fi
    set -e
  fi
}
trap cleanup EXIT

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ======
[[ -x "$(command -v gcloud)" ]] || error "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ gcloud"
[[ -x "$(command -v jq)" ]] || error "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ jq"
[[ -f "./gcp-create-template-from-config.sh" ]] || error "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ gcp-create-template-from-config.sh —É –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"

# ====== –ê—Ä–≥—É–º–µ–Ω—Ç–∏ ======
SINGLE_MODE=0
declare -A OVERRIDES
DISKS_OVERRIDE_RAW=""

for arg in "$@"; do
  case $arg in
    --source-instance=*) SOURCE_INSTANCE="${arg#*=}" ;;
    --source-template=*) SOURCE_TEMPLATE="${arg#*=}" ;;
    --source-config=*) SOURCE_CONFIG="${arg#*=}" ;;
    --new-instance=*) NEW_INSTANCE="${arg#*=}" ;;
    --new-template=*) NEW_TEMPLATE="${arg#*=}" ;;
    --new-config=*) NEW_CONFIG="${arg#*=}" ;;
    --single|--single-instance) SINGLE_MODE=1 ;;
    --zone=*) ZONE="${arg#*=}" ;;
    --project=*) PROJECT="${arg#*=}" ;;
    --disks=*)
      DISKS_OVERRIDE_RAW="${arg#*=}"
      ;;
    --*=*)
      key="${arg%%=*}"
      val="${arg#*=}"
      key="${key#--}"
	  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ disks, –±–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–∫—Ä–µ–º–æ
      if [[ "$key" != "disks" ]]; then
        OVERRIDES["$key"]="$val"
      fi
      ;;
    *)
      error "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg"
      ;;
  esac
done

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∂–µ—Ä–µ–ª ======
SOURCE_COUNT=0
[[ -n "${SOURCE_INSTANCE:-}" ]] && ((SOURCE_COUNT++))
[[ -n "${SOURCE_TEMPLATE:-}" ]] && ((SOURCE_COUNT++))
[[ -n "${SOURCE_CONFIG:-}" ]] && ((SOURCE_COUNT++))

[[ $SOURCE_COUNT -eq 0 ]] && error "‚ùå –í–∫–∞–∂—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ: --source-instance, --source-template –∞–±–æ --source-config"
[[ $SOURCE_COUNT -gt 1 ]] && error "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ"

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ –∑–æ–Ω–∏ ======
PROJECT="${PROJECT:-$(gcloud config get-value project 2>/dev/null || echo "")}"
[[ -z "$PROJECT" ]] && error "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç —ñ –Ω–µ –∑–∞–¥–∞–Ω–æ —É gcloud config"

ZONE="${ZONE:-$(gcloud config get-value compute/zone 2>/dev/null || echo "")}"
[[ -z "$ZONE" ]] && error "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∑–æ–Ω—É —ñ –Ω–µ –∑–∞–¥–∞–Ω–æ —É gcloud config"

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ overrides ======
has_overrides() {
  [[ ${#OVERRIDES[@]} -gt 0 ]]
}

# ====== –§—É–Ω–∫—Ü—ñ—ó ======

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –¥–∏—Å–∫
disk_exists() {
  local disk_name=$1
  local zone=$2
  gcloud compute disks describe "$disk_name" --zone="$zone" --project="$PROJECT" &>/dev/null
}

# –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∏—Å–∫–∞, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
prompt_create_disk() {
  local disk_name=$1
  echo
  read -rp "‚ùì –î–∏—Å–∫ '$disk_name' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥–∏—Å–∫ —Ç–∏–ø—É pd-ssd 50GB? (y/n): " ans
  case "$ans" in
    y|Y) return 0 ;;
    *) return 1 ;;
  esac
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∏—Å–∫–∞ –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
create_disk() {
  local disk_name=$1
  local zone=$2
  log "üìÄ –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Å–∫ '$disk_name' —Ç–∏–ø—É pd-ssd —Ä–æ–∑–º—ñ—Ä–æ–º 10GB —É –∑–æ–Ω—ñ $zone..."
  gcloud compute disks create "$disk_name" --type=pd-ssd --size=10GB --zone="$zone" --project="$PROJECT" || {
    error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Å–∫ '$disk_name'"
  }
  log "‚úÖ –î–∏—Å–∫ '$disk_name' —Å—Ç–≤–æ—Ä–µ–Ω–æ."
}

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–∏—Å–∫—ñ–≤ –∑ JSON (–ø–∞—Ä—Å–∏–Ω–≥)
# –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: deviceName boot autoDelete diskName
parse_disks_from_json() {
  local json_file=$1
  jq -r '
    .disks[] | 
    [
      .deviceName,
      (.boot // false),
      (.autoDelete // false),
      (.source | split("/") | .[-1])
    ] | @tsv' "$json_file"
}

# –§–æ—Ä–º—É—î –∞—Ä–≥—É–º–µ–Ω—Ç–∏ --disk= –¥–ª—è gcloud create instance
# –§–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞: deviceName boot autoDelete diskName
generate_disk_args() {
  local deviceName=$1
  local boot=$2
  local autoDelete=$3
  local diskName=$4

  local arg="name=$diskName"
  arg+=",boot=$( [[ $boot == true ]] && echo yes || echo no )"
  arg+=",auto-delete=$( [[ $autoDelete == true ]] && echo yes || echo no )"

  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—é–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ mode=rw
  echo "$arg"
}

# ====== –û–±—Ä–æ–±–∫–∞ –¥–∏—Å–∫—ñ–≤ —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ --disks= =====
process_disks_override() {
  # –í–∏–∫–æ–Ω—É—î–º–æ –æ–±—Ä–æ–±–∫—É DISKS_OVERRIDE_RAW, –æ–Ω–æ–≤–ª—é—î–º–æ TMP_JSON
  local raw="$1"

  if [[ -z "$raw" ]]; then
    warn "‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä --disks –ø–µ—Ä–µ–¥–∞–Ω–æ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ."
    return 0
  fi

  log "‚öôÔ∏è –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ override --disks..."

  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ [
  if [[ "$raw" =~ ^\[ ]]; then
    # –í–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ JSON-–º–∞—Å–∏–≤, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
    echo "$raw" | jq empty 2>/dev/null || error "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON-–º–∞—Å–∏–≤ —É --disks"
    jq --argjson disks "$raw" '.disks = $disks' "$TMP_JSON" > "${TMP_JSON}.tmp" && mv "${TMP_JSON}.tmp" "$TMP_JSON"
    return 0
  fi

  # –Ø–∫—â–æ –Ω–µ JSON - –ø–∞—Ä—Å–∏–º–æ —è–∫ —Ä—è–¥–æ–∫ –¥–∏—Å–∫—ñ–≤ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö ;
  IFS=';' read -ra disk_items <<< "$raw"
  disks_json="[]"
  for item in "${disk_items[@]}"; do
    declare -A params
    IFS=',' read -ra pairs <<< "$item"
    for pair in "${pairs[@]}"; do
      key="${pair%%=*}"
      val="${pair#*=}"
      # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è yes/no —É boolean
      if [[ "$val" == "yes" ]]; then val=true; elif [[ "$val" == "no" ]]; then val=false; fi
      params["$key"]="$val"
    done

    # –§–æ—Ä–º—É—î–º–æ deviceName (–ø–µ—Ä–µ–≤–∞–≥–∞ deviceName, —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî name)
    deviceName="${params[deviceName]:-${params[name]}}"
    [[ -z "$deviceName" ]] && error "‚ùå –í –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–∏—Å–∫–∞ –º–∞—î –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ 'deviceName' –∞–±–æ 'name'"

    boot=${params[boot]:-false}
    autoDelete=${params["auto-delete"]:-false}
    diskName="${params[name]:-$deviceName}"

    # –§–æ—Ä–º—É—î–º–æ source
    source="projects/$PROJECT/zones/$ZONE/disks/$diskName"

    disk_obj=$(jq -n \
      --arg deviceName "$deviceName" \
      --arg source "$source" \
      --argjson boot "$boot" \
      --argjson autoDelete "$autoDelete" \
      '{
        deviceName: $deviceName,
        source: $source,
        boot: $boot,
        autoDelete: $autoDelete
      }')
    disks_json=$(jq --argjson disk "$disk_obj" '. + [$disk]' <<< "$disks_json")
  done

  jq --argjson disks "$disks_json" '.disks = $disks' "$TMP_JSON" > "${TMP_JSON}.tmp" && mv "${TMP_JSON}.tmp" "$TMP_JSON"
}

# ====== –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ—ó –ø—Ä–∏ —ñ—Å–Ω—É—é—á–æ–º—É —Ä–µ—Å—É—Ä—Å—ñ ======
# –ü–æ–≤–µ—Ä—Ç–∞—î —É —Ñ–æ—Ä–º–∞—Ç—ñ choice|new_name
prompt_for_action() {
  local resource_key=$1
  local resource_name=$2
  local resource_label=""
  local input_prompt=""
  local delete_prompt=""

  case "$resource_key" in
    template)
      resource_label="—à–∞–±–ª–æ–Ω"
      input_prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –¥–ª—è —à–∞–±–ª–æ–Ω—É"
      delete_prompt="–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —à–∞–±–ª–æ–Ω"
      ;;
    instance)
      resource_label="VM"
      input_prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è VM"
      delete_prompt="–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É VM"
      ;;
    config)
      resource_label="–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"
      input_prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
      delete_prompt="–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
      ;;
    *)
      resource_label="$resource_key"
      input_prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –¥–ª—è $resource_label"
      delete_prompt="–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π $resource_label"
      ;;
  esac

  while true; do
    echo -e "\n‚ö†Ô∏è $resource_label –∑ —ñ–º'—è–º '$resource_name' –≤–∂–µ —ñ—Å–Ω—É—î."
    echo "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    echo "  d - $delete_prompt"
    echo "  n - $input_prompt"
    echo "  c - –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é"
    read -rp "–í–∞—à –≤–∏–±—ñ—Ä (d/n/c): " choice

    case "$choice" in
      d|D)
        echo "d|$resource_name"
        return 0
        ;;
      n|N)
       while true; do
         read -rp "$input_prompt: " new_name
         if [[ -n "$new_name" ]]; then
           echo "n|$new_name"
           return 0
         else
           echo "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
         fi
       done
       ;;
      c|C)
        echo "c|"
        return 0
        ;;
      *)
        echo "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        ;;
    esac
  done
}

# ====== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—É ======
resource_exists() {
  local type=$1
  local name=$2
  case "$type" in
    template)
      gcloud compute instance-templates describe "$name" --project="$PROJECT" &>/dev/null
      ;;
    instance)
      gcloud compute instances describe "$name" --zone="$ZONE" --project="$PROJECT" &>/dev/null
      ;;
    config)
      [[ -f "$name" ]]
      ;;
    *)
      return 1
      ;;
  esac
}

# ====== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —ñ–∑ JSON ======
create_template_from_config() {
  local CONFIG_JSON=$1
  local TEMPLATE_NAME=$2

  CMD=(./gcp-create-template-from-config.sh --config="$CONFIG_JSON" --template="$TEMPLATE_NAME" --project="$PROJECT")

  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∂–∏–º single - –ø–µ—Ä–µ–¥–∞—î–º–æ --single
  if [[ "${SINGLE_MODE:-0}" -eq 1 ]]; then
    CMD+=(--single)
  fi

  "${CMD[@]}" || error "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É '$TEMPLATE_NAME'"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ –≤ JSON-—Ñ–∞–π–ª—ñ
check_override_key_exists() {
  local json_file=$1
  local key=$2

  jq --arg key "$key" '
    def parse_path(path):
      [capture("(?<head>[^.\\[]+)").head] +
      (path | scan("\\[(\\d+)\\]|\\.([^.\\[]+)") | map(if .[0] == "[" then (. | tonumber) else . end));
    getpath(parse_path($key)) != null
  ' "$json_file"
}

# ====== –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ======
TMP_JSON=$(mktemp)

# üì¶ –û—Ç—Ä–∏–º—É—î–º–æ JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
if [[ -n "${SOURCE_INSTANCE:-}" ]]; then
  log "üì• –û—Ç—Ä–∏–º—É—î–º–æ JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é VM '$SOURCE_INSTANCE'..."
  gcloud compute instances describe "$SOURCE_INSTANCE" \
    --project="$PROJECT" --zone="$ZONE" --format=json > "$TMP_JSON" || error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é VM"

elif [[ -n "${SOURCE_TEMPLATE:-}" ]]; then
  log "üì• –û—Ç—Ä–∏–º—É—î–º–æ JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —à–∞–±–ª–æ–Ω—É '$SOURCE_TEMPLATE'..."
  gcloud compute instance-templates describe "$SOURCE_TEMPLATE" \
    --project="$PROJECT" --format=json > "$TMP_JSON" || error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —à–∞–±–ª–æ–Ω—É"

elif [[ -n "${SOURCE_CONFIG:-}" ]]; then
  log "üì• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π JSON '$SOURCE_CONFIG'..."
  cp "$SOURCE_CONFIG" "$TMP_JSON"
fi

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ overrides, –æ–∫—Ä—ñ–º disks (–≤–æ–Ω–∏ –æ–∫—Ä–µ–º–æ)
if has_overrides; then
  log "‚öôÔ∏è –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ overrides –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
  for key in "${!OVERRIDES[@]}"; do
    val="${OVERRIDES[$key]}"
	
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–ª—é—á —É JSON
    exists=$(check_override_key_exists "$TMP_JSON" "$key")
    if [[ "$exists" != "true" ]]; then
      warn "‚ö†Ô∏è –ö–ª—é—á override '$key' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –Ω–æ–≤–∏–π."
    fi	
	
    jq --arg key "$key" --arg val "$val" '
      def parse_path(path):
        [capture("(?<head>[^.\\[]+)").head] +
        (path | scan("\\[(\\d+)\\]|\\.([^.\\[]+)") | map(if .[0] == "[" then (. | tonumber) else . end));
      setpath(parse_path($key); $val)
    ' "$TMP_JSON" > "${TMP_JSON}.tmp" && mv "${TMP_JSON}.tmp" "$TMP_JSON"
  done
fi

# –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ --disks, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ override —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–µ–∫—Ü—ñ—é –¥–∏—Å–∫—ñ–≤
if [[ -n "$DISKS_OVERRIDE_RAW" ]]; then
  process_disks_override "$DISKS_OVERRIDE_RAW"
fi

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫—ñ–≤ –∑ TMP_JSON
readarray -t DISKS_ARR < <(parse_disks_from_json "$TMP_JSON")
if [[ ${#DISKS_ARR[@]} -eq 0 ]]; then
  warn "‚ö†Ô∏è –£ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∏—Å–∫—ñ–≤"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
UPDATED_DISKS_JSON="[]"
for disk_line in "${DISKS_ARR[@]}"; do
  IFS=$'\t' read -r deviceName boot autoDelete diskName <<< "$disk_line"

  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∏—Å–∫ —ñ—Å–Ω—É—î
  if ! disk_exists "$diskName" "$ZONE"; then
    if prompt_create_disk "$diskName"; then
      create_disk "$diskName" "$ZONE"
    else
      error "‚ùå –î–∏—Å–∫ '$diskName' –Ω–µ —ñ—Å–Ω—É—î —ñ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π. –°–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    fi
  fi

  # –§–æ—Ä–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–ª–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –¥–∏—Å–∫–∞
  updated_disk=$(jq -n \
    --arg deviceName "$deviceName" \
    --arg source "projects/$PROJECT/zones/$ZONE/disks/$diskName" \
    --argjson boot "$boot" \
    --argjson autoDelete "$autoDelete" \
    '{
      deviceName: $deviceName,
      source: $source,
      boot: $boot,
      autoDelete: $autoDelete
    }')

  # –î–æ–¥–∞—î–º–æ –¥–æ –º–∞—Å–∏–≤—É –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∏—Å–∫—ñ–≤
  UPDATED_DISKS_JSON=$(jq --argjson disk "$updated_disk" '. + [$disk]' <<< "$UPDATED_DISKS_JSON")
done

# –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∏—Å–∫–∏ –Ω–∞–∑–∞–¥ —É TMP_JSON
jq --argjson disks "$UPDATED_DISKS_JSON" '.disks = $disks' "$TMP_JSON" > "${TMP_JSON}.tmp" && mv "${TMP_JSON}.tmp" "$TMP_JSON"
log "üì¶ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–∫—Ü—ñ—é –¥–∏—Å–∫—ñ–≤ —É TMP_JSON"

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
if [[ -n "${NEW_CONFIG:-}" ]]; then
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  while resource_exists config "$NEW_CONFIG"; do
    action=$(prompt_for_action config "$NEW_CONFIG")
    choice="${action%%|*}"
    new_name="${action#*|}"

    case "$choice" in
      d)
        if [[ -f "$NEW_CONFIG" ]]; then
          rm -f "$NEW_CONFIG"
          log "‚úÖ –Ü—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó '$NEW_CONFIG' –≤–∏–¥–∞–ª–µ–Ω–æ."
        else
          warn "‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó '$NEW_CONFIG' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        fi
        break
        ;;
      n)
        NEW_CONFIG="$new_name"
        ;;
      c)
        error "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
        ;;
    esac
  done
  cp "$TMP_JSON" "$NEW_CONFIG"
  log "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É —Ñ–∞–π–ª: $NEW_CONFIG"
fi

# üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ —à–∞–±–ª–æ–Ω, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ --new-template
if [[ -n "${NEW_TEMPLATE:-}" ]]; then
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
  while resource_exists template "$NEW_TEMPLATE"; do
    action=$(prompt_for_action template "$NEW_TEMPLATE")
    choice="${action%%|*}"
    new_name="${action#*|}"

    case "$choice" in
      d)
        gcloud compute instance-templates delete "$NEW_TEMPLATE" --quiet --project="$PROJECT"
        log "‚úÖ –Ü—Å–Ω—É—é—á–∏–π —à–∞–±–ª–æ–Ω '$NEW_TEMPLATE' –≤–∏–¥–∞–ª–µ–Ω–æ."
        break
        ;;
      n)
        NEW_TEMPLATE="$new_name"
        ;;
      c)
        error "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
        ;;
    esac
  done
  log "üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω '$NEW_TEMPLATE'..."
  create_template_from_config "$TMP_JSON" "$NEW_TEMPLATE"
fi

# üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É VM, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ --new-instance
if [[ -n "${NEW_INSTANCE:-}" ]]; then

  if [[ -z "$ZONE" ]]; then
    error "‚ùå –ó–æ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ VM"
  fi
  
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è VM
  while resource_exists instance "$NEW_INSTANCE"; do
    action=$(prompt_for_action instance "$NEW_INSTANCE")
    choice="${action%%|*}"
    new_name="${action#*|}"

    case "$choice" in
      d)
        gcloud compute instances delete "$NEW_INSTANCE" --quiet --zone="$ZONE" --project="$PROJECT"
        log "‚úÖ –Ü—Å–Ω—É—é—á–∞ VM '$NEW_INSTANCE' –≤–∏–¥–∞–ª–µ–Ω–∞."
        break
        ;;
      n)
        NEW_INSTANCE="$new_name"
        ;;
      c)
        error "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
        ;;
    esac
  done
  
  # –Ø–∫—â–æ —à–∞–±–ª–æ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TMP_JSON –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É
  if [[ -z "${NEW_TEMPLATE:-}" ]]; then
    TMP_TEMPLATE="tmp-template-$(date +%s)"
    log "üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —à–∞–±–ª–æ–Ω '$TMP_TEMPLATE' –¥–ª—è VM..."
    create_template_from_config "$TMP_JSON" "$TMP_TEMPLATE"
    NEW_TEMPLATE="$TMP_TEMPLATE"
    TMP_TEMPLATE_CREATED=1
  else
    TMP_TEMPLATE_CREATED=0
  fi

  log "üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É VM '$NEW_INSTANCE' –∑—ñ —à–∞–±–ª–æ–Ω—É '$NEW_TEMPLATE'..."
  gcloud compute instances create "$NEW_INSTANCE" \
    --source-instance-template="$NEW_TEMPLATE" \
    --zone="$ZONE" \
    --project="$PROJECT" \
    || error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ VM –∑—ñ —à–∞–±–ª–æ–Ω—É '$NEW_TEMPLATE'"
  log "‚úÖ –ù–æ–≤–∞ VM '$NEW_INSTANCE' —Å—Ç–≤–æ—Ä–µ–Ω–∞"
fi