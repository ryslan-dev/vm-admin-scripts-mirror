#!/bin/bash

# üõ†Ô∏è GCP Restore VM Config from JSON - –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á—É VM –Ω–∞ –æ—Å–Ω–æ–≤—ñ JSON –∫–æ–Ω—Ñ—ñ–≥—É

set -e

# üé® –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –ª–æ–≥—ñ–≤
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

log()    { echo -e "${GREEN}[‚úî]${NC} $1"; }
warn()   { echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"; }
error()  { echo -e "${RED}[‚úñ]${NC} $1" >&2; exit 1; }
confirm() {
  echo -en "${YELLOW}[‚ùì]${NC} $1 [y/N]: "
  read -r ans
  [[ "$ans" =~ ^[Yy]$ ]]
}

# ====== –ê—Ä–≥—É–º–µ–Ω—Ç–∏ ======
for arg in "$@"; do
  case $arg in
    --config=*) CONFIG_FILE="${arg#*=}"; shift ;;
    --vm=*) VM_NAME="${arg#*=}"; shift ;;
    --zone=*) ZONE="${arg#*=}"; shift ;;
    --log-file=*) LOG_FILE="${arg#*=}"; shift ;;
    *) error "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg" ;;
  esac
done

[[ -z "$CONFIG_FILE" ]] && error "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --config=path/to/config.json"
[[ ! -f "$CONFIG_FILE" ]] && error "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $CONFIG_FILE"

# –ê–≤—Ç–æ–æ—Ç—Ä–∏–º–∞–Ω–Ω—è VM_NAME —ñ ZONE –∑ –∫–æ–Ω—Ñ—ñ–≥—É, —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω—ñ —è–≤–Ω–æ
VM_NAME="${VM_NAME:-$(jq -r '.name' "$CONFIG_FILE")}"
ZONE="${ZONE:-$(jq -r '.zone' "$CONFIG_FILE")}"

[[ -z "$VM_NAME" || -z "$ZONE" ]] && error "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ VM_NAME –∞–±–æ ZONE"

if [[ -n "$LOG_FILE" ]]; then
  exec > >(tee -a "$LOG_FILE") 2>&1
fi

log "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è VM: $VM_NAME —É –∑–æ–Ω—ñ $ZONE"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è VM
if ! gcloud compute instances describe "$VM_NAME" --zone="$ZONE" &>/dev/null; then
  error "‚ùå –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –º–∞—à–∏–Ω–∞ $VM_NAME –Ω–µ —ñ—Å–Ω—É—î —É –∑–æ–Ω—ñ $ZONE"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É VM
STATUS=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --format="get(status)")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è resize –¥–∏—Å–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ ---
resize_disk_if_needed() {
  local disk_name="$1"
  local expected_size_gb="$2"

  # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ –≤ GCP
  local actual_size_gb
  actual_size_gb=$(gcloud compute disks describe "$disk_name" --zone="$ZONE" --format="value(sizeGb)") || {
    warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ $disk_name"
    return
  }

  if (( actual_size_gb < expected_size_gb )); then
    error "üö® –†–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ $disk_name ($actual_size_gb GB) –º–µ–Ω—à–∏–π –∑–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π $expected_size_gb GB ‚Äî –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ."
  elif (( actual_size_gb > expected_size_gb )); then
    warn "‚ö†Ô∏è –†–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ $disk_name –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ $((actual_size_gb - expected_size_gb)) GB. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ resize —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏."

    if [[ "$STATUS" != "RUNNING" ]]; then
      error "VM $VM_NAME –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–ø—É—Å—Ç—ñ—Ç—å VM –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º resize —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏."
    fi

    log "üìà –í–∏–∫–æ–Ω—É—î–º–æ growpart —ñ resize2fs –Ω–∞ VM $VM_NAME –¥–ª—è –¥–∏—Å–∫–∞ $disk_name"
    gcloud compute ssh "$VM_NAME" --zone="$ZONE" --quiet --command="
      set -e
      disk_dev=\$(ls /dev/disk/by-id/google-$disk_name 2>/dev/null || echo '')
      if [[ -z \"\$disk_dev\" ]]; then
        echo '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –¥–∏—Å–∫–∞ $disk_name'
        exit 1
      fi
      sudo growpart \$disk_dev 1
      sudo resize2fs \${disk_dev}1
    " || warn "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Ñ–∞–π–ª–æ–≤—É —Å–∏—Å—Ç–µ–º—É –¥–∏—Å–∫–∞ $disk_name"

    log "‚úÖ Resize —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  else
    log "–†–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ $disk_name –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É ‚Äî resize –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω"
  fi
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö ---
update_metadata() {
  local meta=$(jq -r '.metadata.items[]? | "\(.key)=\(.value)"' "$CONFIG_FILE" 2>/dev/null || true)
  if [[ -n "$meta" ]]; then
    log "–û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ..."
    gcloud compute instances add-metadata "$VM_NAME" --zone="$ZONE" --metadata "$meta"
    log "–ú–µ—Ç–∞–¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω—ñ"
  else
    warn "–ú–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è"
  fi
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ ---
update_tags() {
  local tags=$(jq -r '.tags.items | join(",")' "$CONFIG_FILE" 2>/dev/null || true)
  if [[ -n "$tags" ]]; then
    log "–û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–≥–∏..."
    gcloud compute instances add-tags "$VM_NAME" --zone="$ZONE" --tags "$tags"
    log "–¢–µ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ"
  else
    warn "–¢–µ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è"
  fi
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª—ñ–≤ ---
update_labels() {
  # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ª–µ–π–±–ª–∏ —É JSON
  current_labels_json=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --format=json | jq '.labels // {}')

  # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ –ª–µ–π–±–ª–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É (JSON –æ–± º—î–∫—Ç)
  new_labels_json=$(jq '.labels // {}' "$CONFIG_FILE")

  # –ó–ª–∏—Ç–∏ –ª–µ–π–±–ª–∏, –¥–µ –Ω–æ–≤—ñ –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
  merged_labels_json=$(jq -s '.[0] * .[1]' <(echo "$current_labels_json") <(echo "$new_labels_json"))

  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É key=value,key2=value2
  labels_str=$(echo "$merged_labels_json" | jq -r 'to_entries | map("\(.key)=\(.value)") | join(",")')

  if [[ -z "$labels_str" ]]; then
    warn "–õ–µ–π–±–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è"
    return
  fi

  log "–û–Ω–æ–≤–ª—é—î–º–æ –ª–µ–π–±–ª–∏..."
  gcloud compute instances update "$VM_NAME" --zone="$ZONE" --update-labels="$labels_str"
  log "–õ–µ–π–±–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ"
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è scheduling (automaticRestart, onHostMaintenance, preemptible) ---
update_scheduling() {
  local autoRestart=$(jq -r '.scheduling.automaticRestart // empty' "$CONFIG_FILE")
  local onHostMaintenance=$(jq -r '.scheduling.onHostMaintenance // empty' "$CONFIG_FILE")
  local preemptible=$(jq -r '.scheduling.preemptible // empty' "$CONFIG_FILE")

  if [[ -n "$autoRestart" || -n "$onHostMaintenance" || -n "$preemptible" ]]; then
    log "–û–Ω–æ–≤–ª—é—î–º–æ scheduling..."
    # VM –º–∞—î –±—É—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –¥–µ—è–∫–∏—Ö scheduling –æ–ø—Ü—ñ–π
    if [[ "$STATUS" == "RUNNING" ]]; then
      if confirm "VM –∑–∞–ø—É—â–µ–Ω–∞. –ó—É–ø–∏–Ω–∏—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è scheduling?"; then
        gcloud compute instances stop "$VM_NAME" --zone="$ZONE"
        log "VM –∑—É–ø–∏–Ω–µ–Ω–∞"
      else
        warn "–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è scheduling"
        return
      fi
    fi
    CMD=(gcloud compute instances update "$VM_NAME" --zone="$ZONE")
    [[ -n "$autoRestart" ]] && CMD+=(--automatic-restart="$autoRestart")
    [[ -n "$onHostMaintenance" ]] && CMD+=(--maintenance-policy="$onHostMaintenance")
    [[ -n "$preemptible" && "$preemptible" == "true" ]] && CMD+=(--preemptible)
    "${CMD[@]}"
    log "Scheduling –æ–Ω–æ–≤–ª–µ–Ω–æ"
  else
    warn "Scheduling –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è"
  fi
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è machine-type (–ø–æ—Ç—Ä–µ–±—É—î –∑—É–ø–∏–Ω–∫–∏ VM) ---
update_machine_type() {
  local machineType=$(jq -r '.machineType' "$CONFIG_FILE" | awk -F/ '{print $NF}')
  if [[ -n "$machineType" ]]; then
    if [[ "$STATUS" == "RUNNING" ]]; then
      if confirm "VM –∑–∞–ø—É—â–µ–Ω–∞. –ó—É–ø–∏–Ω–∏—Ç–∏ –¥–ª—è –∑–º—ñ–Ω–∏ machine-type?"; then
        gcloud compute instances stop "$VM_NAME" --zone="$ZONE"
        log "VM –∑—É–ø–∏–Ω–µ–Ω–∞"
      else
        warn "–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è machine-type"
        return
      fi
    fi
    gcloud compute instances set-machine-type "$VM_NAME" --zone="$ZONE" --machine-type="$machineType"
    log "Machine-type –æ–Ω–æ–≤–ª–µ–Ω–æ"
  else
    warn "Machine-type –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –∫–æ–Ω—Ñ—ñ–≥—É"
  fi
}

# --- –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–∫—ñ–≤ (–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è) ---
update_disks() {
  local disksConfig=$(jq -c '.disks[]' "$CONFIG_FILE")
  local currentDisks=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --format="value(disks.deviceName)")

  for diskJson in $disksConfig; do
    local deviceName=$(jq -r '.deviceName' <<< "$diskJson")
    local boot=$(jq -r '.boot' <<< "$diskJson")
    local size=$(jq -r '.initializeParams.diskSizeGb' <<< "$diskJson")
    local type=$(jq -r '.initializeParams.diskType' <<< "$diskJson")
    log "–û–±—Ä–æ–±–∫–∞ –¥–∏—Å–∫–∞ $deviceName"

    if ! gcloud compute disks describe "$deviceName" --zone="$ZONE" &>/dev/null; then
      log "–°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Å–∫ $deviceName"
      gcloud compute disks create "$deviceName" --size="${size}GB" --type="$type" --zone="$ZONE"
      log "–î–∏—Å–∫ $deviceName —Å—Ç–≤–æ—Ä–µ–Ω–æ"
    fi

    if ! echo "$currentDisks" | grep -q "$deviceName"; then
      log "–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –¥–∏—Å–∫ $deviceName"
      local attachCmd=(gcloud compute instances attach-disk "$VM_NAME" --disk="$deviceName" --zone="$ZONE")
      [[ "$boot" == "true" ]] && attachCmd+=(--boot)
      "${attachCmd[@]}"
      log "–î–∏—Å–∫ $deviceName –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    fi
	
	# --- –í–∏–∫–ª–∏–∫ resize, —è–∫—â–æ —Ç—Ä–µ–±–∞ ---
    resize_disk_if_needed "$deviceName" "$size"
  done

  # –í—ñ–¥‚Äô—î–¥–Ω–∞–Ω–Ω—è –∑–∞–π–≤–∏—Ö –¥–∏—Å–∫—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
  if confirm "–í—ñ–¥‚Äô—î–¥–Ω–∞—Ç–∏ –∑–∞–π–≤—ñ –¥–∏—Å–∫–∏, –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ —É –∫–æ–Ω—Ñ—ñ–≥—É?"; then
    for curDisk in $currentDisks; do
      if ! jq -r '.disks[].deviceName' "$CONFIG_FILE" | grep -q "^$curDisk$"; then
        log "–í—ñ–¥‚Äô—î–¥–Ω—É—î–º–æ –¥–∏—Å–∫ $curDisk"
        gcloud compute instances detach-disk "$VM_NAME" --disk="$curDisk" --zone="$ZONE"
        log "–î–∏—Å–∫ $curDisk –≤—ñ–¥‚Äô—î–¥–Ω–∞–Ω–æ"
      fi
    done
  fi
}

# --- –ó–∞–ø—É—Å–∫ VM –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ---
start_vm() {
  if [[ "$STATUS" != "RUNNING" ]]; then
    if confirm "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ VM –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è?"; then
      gcloud compute instances start "$VM_NAME" --zone="$ZONE"
      log "VM –∑–∞–ø—É—â–µ–Ω–∞"
    fi
  else
    log "VM –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"
  fi
}

# --- –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å ---
update_metadata
update_tags
update_labels
update_scheduling
update_machine_type
update_disks
start_vm

log "‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó VM –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
