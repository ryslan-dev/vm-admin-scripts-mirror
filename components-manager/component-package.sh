declare -gA package_labels=(
  [get_components]='–û—Ç—Ä–∏–º—É—î–º–æ –ø–∞–∫–µ—Ç–∏'
  [no_components_found]='–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–∏'
  [no_components_found_with_filter]='–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º: $(IFS=, ; echo "${FILTER[*]}")'
  [available_component]='–î–æ—Å—Ç—É–ø–Ω–∏–π –ø–∞–∫–µ—Ç'
  [available_components]='–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞–∫–µ—Ç–∏'
  [no_components_selected]='–ü–∞–∫–µ—Ç–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω—ñ'
  [selected_component]='–û–±—Ä–∞–Ω–∏–π –ø–∞–∫–µ—Ç'
  [selected_components]='–û–±—Ä–∞–Ω—ñ –ø–∞–∫–µ—Ç–∏'
  [component_processing]='–û–±—Ä–æ–±–∫–∞ –ø–∞–∫–µ—Ç–∞'
  [components_processing]='–û–±—Ä–æ–±–∫–∞ –ø–∞–∫–µ—Ç—ñ–≤'
  [q_continue_working_with_selected_component]='–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –æ–±—Ä–∞–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º?'
  [q_continue_working_with_selected_components]='–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –æ–±—Ä–∞–Ω–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏?'
)

# ===================== CACHE-DATA =====================

# Priorities cache
CACHE_FILE="${HOME}/.cache/package_priorities.cache"

# üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à priorities —É –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏–π –º–∞—Å–∏–≤
function load_package_priorities_cache() {
  [[ -f "$CACHE_FILE" ]] || return 0
  
  if ! declare -p PACKAGE_PRIORITY &>/dev/null 2>&1; then
	declare -gA PACKAGE_PRIORITY
  fi
  
  local pkg priority

  while IFS='=' read -r pkg priority; do
    [[ -n "$pkg" && -n "$priority" ]] && PACKAGE_PRIORITY["$pkg"]="$priority"
  done < "$CACHE_FILE"
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à priorities —É –ø–∞–º‚Äô—è—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
#load_package_priorities_cache

# üíæ –ó–∞–ø–∏—Å priority —É —Ñ–∞–π–ª –∫–µ—à—É
function save_package_priority_to_cache() {
  local pkg="$1"
  local priority="$2"
  echo "${pkg}=${priority}" >> "$CACHE_FILE"
}

# Descriptions cache
CACHE_FILE_2="${HOME}/.cache/package_descriptions.cache"

declare -A PACKAGE_DESCRIPTION

# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É
function load_package_descriptions_cache() {
    [[ -f "$CACHE_FILE_2" ]] || { 
        mkdir -p "${HOME}/.cache"
        : > "$CACHE_FILE_2"
        echo "(i) –§–∞–π–ª –∫–µ—à—É –æ–ø–∏—Å—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: $CACHE_FILE_2"
        return 0
    }
	
	if ! declare -p PACKAGE_DESCRIPTION &>/dev/null 2>&1; then
		declare -gA PACKAGE_DESCRIPTION
	fi
	
	local pkg description

    local count=0
    while IFS='=' read -r pkg description; do
        pkg="${pkg//[$'\t\r\n']/}"             # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç–∞–±–∏/–ø–µ—Ä–µ–Ω–æ—Å–∏
        description="${description//[$'\t\r\n']/}"
        [[ -z "$pkg" || -z "$description" ]] && continue
        PACKAGE_DESCRIPTION["$pkg"]="$description"
        ((count++))
    done < "$CACHE_FILE_2"

    echo "(i) –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –æ–ø–∏—Å—ñ–≤ –ø–∞–∫–µ—Ç—ñ–≤ –∑ –∫–µ—à—É: $count"
}

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
function save_package_description_to_cache() {
    local pkg="$1"
    local description="$2"

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É/–≤ –∫—ñ–Ω—Ü—ñ
    pkg="$(echo -n "$pkg" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
    description="$(echo -n "$description" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"

    # –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
    description="$(echo "$description" | tr '\n' ' ' | tr -s ' ')"

    [[ -z "$pkg" || -z "$description" ]] && {
        echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: –ø–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è"
        return 1
    }

    mkdir -p "${HOME}/.cache"
    echo "${pkg}=${description}" >> "$CACHE_FILE_2"
}

# ===================== FUNCTIONS =====================

function is_pkg_installed() {
    dpkg-query -W -f='${Status}' "$1" 2>/dev/null | grep -q "install ok installed"
}

# üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø–∞–∫–µ—Ç–∞
function show_package_priority() {
    local pkg="$1"
    local apt_priority=""
    local priority=""

    # –û—á–∏—â—É—î–º–æ pkg –≤—ñ–¥ –ø—Ä–æ–±—ñ–ª—ñ–≤
    pkg="$(echo "$pkg" | xargs)"
    [[ -z "$pkg" ]] && echo "unknown" && return 1

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏–π –º–∞—Å–∏–≤, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if ! declare -p PACKAGE_PRIORITY &>/dev/null; then
        declare -gA PACKAGE_PRIORITY
        load_package_priorities_cache
    fi

    # –Ø–∫—â–æ —î –≤ –∫–µ—à—ñ, –±–µ—Ä–µ–º–æ –∑–≤—ñ–¥—Ç–∏
    if [[ -v PACKAGE_PRIORITY["$pkg"] ]]; then
        apt_priority="${PACKAGE_PRIORITY["$pkg"]}"
    else
        # –û—Ç—Ä–∏–º—É—î–º–æ Priority —á–µ—Ä–µ–∑ apt-cache, –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ grep + cut –∑–∞–º—ñ—Å—Ç—å awk, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–∞–±—à–µ–ª—ñ–≤ —É awk
        apt_priority="$(apt-cache show "$pkg" 2>/dev/null | grep -m1 '^Priority:' | cut -d' ' -f2-)"
        apt_priority="${apt_priority:-unknown}"

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ —ñ –∫–µ—à
        PACKAGE_PRIORITY["$pkg"]="$apt_priority"
        save_package_priority_to_cache "$pkg" "$apt_priority"
    fi

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    priority="${COMPONENT_PRIORITIES[$apt_priority]:-unknown}"

    echo "$priority"
}

function get_package_priority() {
    local pkg="$1"
    local result="$2"  # —ñ–º'—è –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    local apt_priority=""
	local priority=""

    if ! declare -p PACKAGE_PRIORITY &>/dev/null; then
        declare -gA PACKAGE_PRIORITY
        load_package_priorities_cache
    fi

    if [[ -v PACKAGE_PRIORITY["$pkg"] ]]; then
        apt_priority="${PACKAGE_PRIORITY["$pkg"]}"
    else
		apt_priority=$(apt-cache show "$pkg" 2>/dev/null | awk -F': ' '/^Priority:/ { print $2; exit }')
        apt_priority="${apt_priority:-unknown}"
        PACKAGE_PRIORITY["$pkg"]="$apt_priority"
        save_package_priority_to_cache "$pkg" "$apt_priority"
    fi

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    priority="${COMPONENT_PRIORITIES[$apt_priority]:-unknown}"

    # –ó–∞–ø–∏—Å—É—î–º–æ —É –∑–º—ñ–Ω–Ω—É –Ω–∞–ø—Ä—è–º—É, –±–µ–∑ echo
    printf -v "$result" "%s" "$priority"
}

function get_package_priorities() {
    local -n pkgs="$1"
	local -n result="$2"

    # –Ø–∫—â–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –≤–∏—Ö—ñ–¥
    (( ${#pkgs[@]} == 0 )) && return 1

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–∏–Ω –≤–∏–∫–ª–∏–∫ apt-cache show –¥–ª—è –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤
    local pkg pri
    while IFS=: read -r pkg pri; do
        pkg="$(echo "$pkg" | xargs)"   # –æ–±—Ä—ñ–∑–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
        pri="${pri:-unknown}"
        result["$pkg"]="$pri"
    done < <(apt-cache show "${pkgs[@]}" 2>/dev/null | awk -v OFS=":" '
        /^Package:/ { pkg=$2 }
        /^Priority:/ { pri=$2; print pkg, pri }
    ')
}

function get_package_description() {
  local pkg="$1"
  local description
  
  # –Ø–∫—â–æ —î –≤ –∫–µ—à—ñ
  if [[ -n "${PACKAGE_DESCRIPTIONS[$pkg]+_}" ]]; then
    description="${PACKAGE_DESCRIPTIONS[$pkg]}"
  elif [[ -n "${PACKAGE_DESCRIPTION[$pkg]+_}" ]]; then
    description="${PACKAGE_DESCRIPTION[$pkg]}"
  else
	# –Ü–Ω–∞–∫—à–µ ‚Äî –æ—Ç—Ä–∏–º–∞—î–º–æ —á–µ—Ä–µ–∑ apt show
    description=$(apt show "$pkg" 2>/dev/null | grep -m1 ^Description: | cut -d' ' -f2-)
	
    PACKAGE_DESCRIPTION["$pkg"]="$description"
	save_package_description_to_cache "$pkg" "$description"
  fi
  
  echo "$description"
}

function get_package_components() {
  local -n filters="$1"
  local -n _out=$2
  _out=()
  
  local PACKAGES=()
  local pkg_priority
  local -A priorities=()
  
  for f in "${filters[@]}"; do
    if [[ -v COMPONENT_PRIORITY["$f"] ]]; then
		priorities["$f"]=1
	fi
  done
  
  # üîé –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤
  if in_array "active" filters; then
	if [[ -z "$SEARCH" ]]; then
	  readarray -t PACKAGES < <(dpkg-query -W -f='${Package}\n')
	else
	  readarray -t PACKAGES < <(dpkg-query -W -f='${Package}\n' | grep -Fi "$SEARCH")
	fi
  else
    if [[ -z "$SEARCH" ]]; then
	  readarray -t PACKAGES < <(apt list 2>/dev/null | cut -d/ -f1 | tail -n +2)
	else
	  readarray -t PACKAGES < <(apt list *"$SEARCH"* 2>/dev/null | cut -d/ -f1 | tail -n +2)
	  #readarray -t PACKAGES < <(apt-cache search --names-only "$SEARCH" | awk '{print $1}')
	fi
  fi
  
  # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Ü–∏–∫–ª—ñ–≤
  if is_array_empty priorities; then
    _out=("${PACKAGES[@]}")
    return 0
  fi
  
  local -A pkg_riorities
  get_package_priorities PACKAGES pkg_riorities
  
  # –Ü–Ω–∞–∫—à–µ ‚Äî —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
  for pkg in "${PACKAGES[@]}"; do
    #echo "$pkg:"
	#show_package_priority "$pkg"
	#pkg_priority="$(show_package_priority "$pkg")"
	#read -r pkg_priority <<< "$(get_package_priority "$pkg")"
	#get_package_priority "$pkg" pkg_priority
	pkg_priority="${pkg_riorities[$pkg]}"
	#echo "$pkg: $pkg_priority"
    if [[ -v priorities["$pkg_priority"] ]]; then
        _out+=("$pkg")
    fi
  done
}

function print_packages() {
  local -n arr=$1
  
  local priority description status
  
  local index=1
  for pkg in "${arr[@]}"; do
	
	priority=""
	description=""
	status=""
	
	get_package_priority "$pkg" priority
	description="$(get_package_description "$pkg")"
	
	status="not installed"
	if is_pkg_installed "$pkg"; then
		status="installed"
	fi
	
    printf "%-4s %-40s | %-13s | %-8s | %s\n" "$index" "$pkg" "$status" "$priority" "$description"
	((index++))
  done
}

function action_package_components() {
  local -n actions="$1"
  local -n packages="$2"
  local label pkg value
  
  local -A action_names=(
    [update]="–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç—ñ–≤"
    [upgrade]="–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"
    [full_upgrade]="–ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º/–∑–∞–º—ñ–Ω–æ—é –ø–∞–∫–µ—Ç—ñ–≤)"
	[dist_upgrade]="–ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º/–∑–∞–º—ñ–Ω–æ—é –ø–∞–∫–µ—Ç—ñ–≤)"
    [install]="–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤"
    [reinstall]="–ü–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤"
    [remove]="–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤ (–∑–∞–ª–∏—à–∞—é—á–∏ –∫–æ–Ω—Ñ—ñ–≥–∏)"
    [purge]="–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—ñ–≤"
    [autoremove]="–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
    [search]="–ü–æ—à—É–∫ –ø–∞–∫–µ—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é —ñ –æ–ø–∏—Å–æ–º"
    [show]="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞–∫–µ—Ç"
    [list]="–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤"
    [policy]="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—ó —Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó"
    [clean]="–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É"
    [autoclean]="–û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ –∫–µ—à—É"
    [download]="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .deb —Ñ–∞–π–ª—É –ø–∞–∫–µ—Ç–∞ –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"
	[is_installed]="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–∞–∫–µ—Ç—ñ–≤"
	[priority]="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –ø–∞–∫–µ—Ç—ñ–≤"
	[short_description]="–í–∏–≤—ñ–¥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å—ñ–≤"
  )
  
  action_package_components__get_label() {
    local key="$1"
    local text="${action_names[$key]:-$key}"
    
	text="${text//\{pkg\}/${pkg:-}}"
    echo "$text"
  }
  
  local priority
  local autoremove=0
  
  is_array_empty packages && log_warn "–ü–∞–∫–µ—Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ" && return 2
  is_array_empty actions && log_warn "–î—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ" && return 2

  for action in "${actions[@]}"; do
	
	pkg="${packages[0]:-}"
	if is_array_single packages && array_key_has_value "${action}_single" action_names; then
		label=$(action_package_components__get_label "${action}_single")
	elif array_key_has_value "$action" action_names; then
        label=$(action_package_components__get_label "$action")
    else
        label="$action"
    fi

    echo -e "${YELLOW_BOLD}$label${NC}\n"
	
	case "$action" in
      install)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  if is_pkg_installed "$pkg"; then
		    status="$(get_log_warn "$pkg —É–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")"
		  else 
            apt-get install -y "$pkg" && status="$(get_log_success "$pkg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")" || status="$(get_log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ $pkg")"
		  fi
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
        ;;
      reinstall)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  apt-get install --reinstall -y "$pkg" && status="$(get_log_success "$pkg –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")" || status="$(get_log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ $pkg")"
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
        ;;
      remove)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  if is_pkg_installed "$pkg"; then
			get_package_priority "$pkg" priority
			if is_required "$pkg" "$priority"; then
			  status="$(get_log_warn "$pkg –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ, –±–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏")"
			else
			  if is_pkg_installed "$pkg"; then
			    apt-get remove -y "$pkg" && status="$(get_log_success "$pkg –≤–∏–¥–∞–ª–µ–Ω–æ")" || status="$(get_log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ $pkg")"
		      else
			    status="$(get_log_warn "$pkg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")"
		      fi
		    fi
		  else
		    status="$(get_log_warn "$pkg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")"
          fi
	  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
        ;;
      purge)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  if is_pkg_installed "$pkg"; then
			get_package_priority "$pkg" priority
			if is_required "$pkg" "$priority"; then
		      status="$(get_log_warn "$pkg –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ, –±–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏")"
		    else
			  apt-get -qq purge -y "$pkg" && {
                autoremove=1
                status="$(get_log_success "$pkg –≤–∏–¥–∞–ª–µ–Ω–æ")"
			  } || status="$(get_log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ $pkg")"
		    fi
		  else
		    status="$(get_log_warn "$pkg –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")"
          fi
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
        ;;
	  autoremove)
		autoremove=1
		;;
	  is_installed)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  if is_pkg_installed "$pkg"; then
			status="installed"
		  else
			status="not installed"
		  fi
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
	    ;;
	  priority)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  get_package_priority "$pkg" priority
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$priority"
		  
		  ((index++))
		done
	    ;;
	  short_description)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  description="$(get_package_description "$pkg")"
		  
		  printf "%-4s %-40s - %s\n" "$index" "$pkg" "$description"
		  
		  ((index++))
		done
	    ;;
	  show)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  echo -e "\n${BOLD}$index –ü–∞–∫–µ—Ç $pkg:${NC}"
		  apt show "$pkg" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫–µ—Ç $pkg"
		  ((index++))
		done
	    ;;
	  policy)
	    local index=1
		for pkg in "${packages[@]}"; do
		  echo -e "\n${BOLD}$index –ü–∞–∫–µ—Ç $pkg:${NC}"
		  apt policy "$pkg" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–µ—Ä—Å—ñ—ó —Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –¥–ª—è –ø–∞–∫–µ—Ç—É $pkg"
		  ((index++))
		done
	    ;;
	  clean)
	    apt clean && log_success "–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –≤–∏–∫–æ–Ω–∞–Ω–æ" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É"
	    ;;
	  autoclean)
	    apt autoclean && log_success "–û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ –∫–µ—à—É –≤–∏–∫–æ–Ω–∞–Ω–æ" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ –∫–µ—à—É"
	    ;;
	  download)
	    local index=1
	    for pkg in "${packages[@]}"; do
		  
		  apt download "$pkg" && status="$(get_log_success ".deb —Ñ–∞–π–ª –ø–∞–∫–µ—Ç–∞ $pkg –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")" || status="$(get_log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .deb —Ñ–∞–π–ª –ø–∞–∫–µ—Ç–∞ $pkg")"
		  
		  printf "%-4s %-40s %s\n" "$index" "$pkg" "$status"
		  
		  ((index++))
		done
	    ;;
	  update)
	    apt update && log_success "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç—ñ–≤"
	    ;;
	  upgrade)
	    apt upgrade && log_success "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"
	    ;;
	  full_upgrade|dist_upgrade)
	    apt full-upgrade && log_success "–ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"
	    ;;
      *)
        log_error "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: $action"
        ;;
	esac
  done
  
  if [[ "$autoremove" == 1 ]]; then
    echo
    echo -e "${YELLOW}‚è≥ ${action_names[autoremove]}...${NC}"
    apt autoremove -y && log_success "üßπ –ö–æ–º–∞–Ω–¥–∞ autoremove –≤–∏–∫–æ–Ω–∞–Ω–∞" || log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ autoremove"
  fi
}

function show_package_filter_menu() {
	menu_header "${HEADER_LABELS[$TYPE]:-$TYPE}:"
    echo "–£—Å—ñ"
    echo "1) –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"
    echo "2) –û–±–æ–≤'—è–∑–∫–æ–≤—ñ"
    echo "3) –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ"
    echo "4) –î–æ–¥–∞–¥–∫–æ–≤—ñ"
	echo "s) –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é"
	menu_nav
}

function parse_package_filter_choices() {
    local choice
    for choice in "${choices[@]}"; do
        case "$choice" in
            "") FILTER+=("all") ;;
            1) FILTER+=("active") ;;
            2) FILTER+=("required") ;;
            3) FILTER+=("optional") ;;
            4) FILTER+=("extra") ;;
            s) FILTER+=("search") ;;
            c) return 1 ;;
            x) exit 0 ;;
            *) log_error "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä"; return 2 ;;
        esac
    done
}

function show_package_action_menu() {
	menu_header "üõ†Ô∏è  –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–∞–º–∏:"
    echo "1) –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ (install)"
	echo "2) –ü–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ (reinstall)"
	echo "3) –í–∏–¥–∞–ª–∏—Ç–∏ (remove)"
	echo "4) –í–∏–¥–∞–ª–∏—Ç–∏ —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ (purge)"
	echo "5) –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (autoremove)"
	menu_header "üìä  –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
	echo "21) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
	echo "22) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
	echo "23) –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"
	echo "24) –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫–µ—Ç (show)"
	echo "25) –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—ó —Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π (policy)"
	menu_header "üßπ  –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–µ—à–µ–º –ø–∞–∫–µ—Ç—ñ–≤:"
	echo "31) –í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö .deb —Ñ–∞–π–ª—ñ–≤ (clean)"
	echo "32) –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ .deb —Ñ–∞–π–ª–∏ (autoclean)"
	echo "33) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .deb —Ñ–∞–π–ª –ø–∞–∫–µ—Ç—É –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (download)"
	menu_header "üîÑ  –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏:"
	echo "41) –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤ (update)"
	echo "42) –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏ (upgrade)"
	echo "43) –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é (full-upgrade)"
	menu_nav
}

function parse_package_action_choices() {
    local choice
	
	if [[ ${#choices[@]} -eq 0 ]]; then
		log_error "–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"
		return 2
	fi
	
    for choice in "${choices[@]}"; do
        case "$choice" in
            1) ACTION+=("install") ;;
            2) ACTION+=("reinstall") ;;
            3) ACTION+=("remove") ;;
            4) ACTION+=("purge") ;;
			5) ACTION+=("autoremove") ;;
			21) ACTION+=("is_installed") ;;
			22) ACTION+=("priority") ;;
			23) ACTION+=("short_description") ;;
			24) ACTION+=("show") ;;
			25) ACTION+=("policy") ;;
			31) ACTION+=("clean") ;;
			32) ACTION+=("autoclean") ;;
			33) ACTION+=("download") ;;
			41) ACTION+=("update") ;;
			42) ACTION+=("upgrade") ;;
			43) ACTION+=("full_upgrade") ;;
            c) return 1 ;;
            x) exit 0 ;;
			*) log_error "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä"; return 2 ;;
		esac
	done
}

function package_filter_menu_items(){
	
	local -n Items="$1"
	local -n Labels="$2"
	
	Labels=(
		[c]="–°–∫–∞—Å—É–≤–∞—Ç–∏"
		[x]="–í–∏–π—Ç–∏"
		[cancel]="${HEADER_LABELS[cancel]:-}"
		[exit]="${HEADER_LABELS[exit]:-}"
		[all]="–£—Å—ñ"
		[active]="–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"
		[required]="–û–±–æ–≤'—è–∑–∫–æ–≤—ñ"
		[optional]="–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ"
		[extra]="–î–æ–¥–∞–¥–∫–æ–≤—ñ"
		[search]="–®—É–∫–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é"
	)
	
	Items=(
		all
		active
        required
        optional
        extra
        search
	)
}

function package_action_menu_items(){
	
	local -n Items="$1"
	local -n Labels="$2"
	
	Labels=(
		[c]="–°–∫–∞—Å—É–≤–∞—Ç–∏"
		[x]="–í–∏–π—Ç–∏"
		[cancel]="${HEADER_LABELS[cancel]:-}"
		[exit]="${HEADER_LABELS[exit]:-}"
		[install]="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ (install)"
		[reinstall]="–ü–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ (reinstall)"
		[remove]="–í–∏–¥–∞–ª–∏—Ç–∏ (remove)"
		[purge]="–í–∏–¥–∞–ª–∏—Ç–∏ —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ (purge)"
		[autoremove]="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (autoremove)"
		[is_installed]="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
		[priority]="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
		[short_description]="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"
		[show]="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–∫–µ—Ç (show)"
		[policy]="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—ó —Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π (policy)"
		[clean]="–í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö .deb —Ñ–∞–π–ª—ñ–≤ (clean)"
		[autoclean]="–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ .deb —Ñ–∞–π–ª–∏ (autoclean)"
		[download]="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .deb —Ñ–∞–π–ª –ø–∞–∫–µ—Ç—É –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (download)"
		[update]="–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤ (update)"
		[upgrade]="–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏ (upgrade)"
		[full_upgrade]="–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é (full-upgrade)"
	)
	
	Items=(
		install
		reinstall
		remove
		purge
		autoremove
		is_installed
		priority
		short_description
		show
		policy
		clean
		autoclean
		download
		update
		upgrade
		full_upgrade
	)
}
