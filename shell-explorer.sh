#!/bin/bash
# shell-explorer.sh
# –§–∞–π–ª–æ–≤–∏–π –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ –Ω–∞ Bash + fzf –∑ –¥—ñ—è–º–∏ –Ω–∞–¥ —Ñ–∞–π–ª–∞–º–∏ —Ç–∞ –ø–∞–ø–∫–∞–º–∏

set -euo pipefail
IFS=$'\n\t'

# ===================== COLORS =====================
NC='\033[0m'                # —Å–∫–∏–¥–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É
RED='\033[91m'				# —á–µ—Ä–≤–æ–Ω–∏–π
GREEN='\033[92m'			# –∑–µ–ª–µ–Ω–∏–π
YELLOW='\033[93m'			# –∂–æ–≤—Ç–∏–π
GRAY='\033[90m'             # —Å—ñ—Ä–∏–π
LIGHT_GRAY='\033[38;5;247m' # —Å–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π
LIGHT_GRAY_BOLD='\033[1;38;5;247m' # –∂–∏—Ä–Ω–∏–π —Å–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π
# ===================== COLORS END =====================

log_success() { echo -e "${GREEN}‚úî ${NC} $*"; }
log_warn() 	  { echo -e "${YELLOW}‚ö†Ô∏è ${NC} $*"; }
log_error()   { echo -e "${RED}‚úñ ${NC} $*"; }

# ===================== REQUIREMENTS =====================
for pkg in fzf bat; do
    if ! command -v "$pkg" &>/dev/null; then
        log_warn "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ $pkg"
        read -rp "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ $pkg? [y/N]: " ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            sudo apt-get update
            if [[ "$pkg" == "bat" ]]; then
                # —É Debian/Ubuntu –ø–∞–∫–µ—Ç –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è batcat
                sudo apt-get install -y bat
                # —Ä–æ–±–∏–º–æ symlink –Ω–∞ –∑–≤–∏—á–Ω—É –Ω–∞–∑–≤—É
                if ! command -v bat &>/dev/null && command -v batcat &>/dev/null; then
                    sudo ln -sf "$(command -v batcat)" /usr/local/bin/bat
                fi
            else
                sudo apt-get install -y "$pkg"
            fi
            log_success "$pkg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        else
			if [[ "$pkg" == "bat" ]]; then
				log_warn "–ë–µ–∑ $pkg –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±—É–¥—É—Ç—å –æ–±–º–µ–∂–µ–Ω—ñ"
			else
				log_error "–ù–∞—è–≤–Ω—ñ—Å—Ç—å $pkg —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"
				exit 1
			fi
        fi
    fi
done

START_DIR="${1:-$HOME}"
CURRENT_DIR=$(realpath -m "$START_DIR")

NBSP=$'\u00A0'  # –Ω–µ–∑–ª–∞–º–Ω–∏–π –ø—Ä–æ–±—ñ–ª

# –Ø–∫—â–æ —î bat - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
if command -v bat &>/dev/null; then
    PAGER_CMD="bat --style=numbers --paging=always --decorations=always"
else
    PAGER_CMD="less"
fi

function menu_divider(){
	echo -e "${GRAY}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî${NC}"
}

function menu_header(){
	local title="$1"
    
	menu_divider
    echo -e "${LIGHT_GRAY_BOLD}$title${NC}"
    menu_divider	
}

function menu_nav_choices(){
	echo -e "${LIGHT_GRAY}c) –°–∫–∞—Å—É–≤–∞—Ç–∏${NC}"
}

function menu_nav(){
	menu_divider
    menu_nav_choices
}



while true; do
	# –§—ñ–∫—Å –¥–ª—è tmux: –ø–µ—Ä—à–∏–π —Ä–∞–∑ —à–∏—Ä–∏–Ω–∞ –º–æ–∂–µ –±—É—Ç–∏ –∫—Ä–∏–≤–æ—é
    if [[ -z "${INIT_WIDTH:-}" ]]; then
        echo -ne "‚è≥  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\r"
		if [[ "${MULTIPANE:-0}" == "1" ]]; then
			sleep 0.3
		else
			sleep 0.1
		fi
        echo -ne "                     \r"  # —Å—Ç–µ—Ä—Ç–∏ —Ä—è–¥–æ–∫
        INIT_WIDTH=1
    fi
	
	# –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
	term_width=$(tput cols 2>/dev/null || echo 80)
	if [[ "${MULTIPANE:-0}" == "1" ]]; then
		visible_width="$term_width"
	else
		visible_width=$(( "$term_width" / 2 ))
	fi
	fixed_width=$((12 + 22 + 2))  # size + date + –≤—ñ–¥—Å—Ç—É–ø–∏
	name_width=$(( visible_width - fixed_width ))
	(( name_width < 20 )) && name_width=20
	
	FZF_PREVIEW='
  raw=$(printf "%s" {} | awk -F"\t" "{print \$1}")
  if [ "$raw" = "__HEADER__" ]; then
	exit 0
  fi
  if [ "$raw" = ".." ]; then
    target=$(dirname "'"$CURRENT_DIR"'")
  else
    target=$(realpath -m "'"$CURRENT_DIR"'/$raw")
  fi

  if [ -d "$target" ]; then
    shopt -s nullglob dotglob
    entries=( "$target"/* )
    shopt -u nullglob dotglob

    if [ ${#entries[@]} -eq 0 ]; then
      echo "(–ø–æ—Ä–æ–∂–Ω—å–æ)"
    else
      NBSP=$'\''\u00A0'\''

      dirs=()
      files=()
      for f in "${entries[@]}"; do
        [ -e "$f" ] || continue
        if [ -d "$f" ]; then dirs+=("$f"); else files+=("$f"); fi
      done

      maxlen=1
      for f in "${dirs[@]}" "${files[@]}"; do
        name=$(basename -- "$f")
        dlen=$(( ${#name} + 1 ))
        (( dlen > maxlen )) && maxlen=$dlen
      done

      for f in "${dirs[@]}"; do
        name=$(basename -- "$f")
        display="/$name"
        info=$(stat -c "%A %U %G %5s %y" -- "$f")
        printf "%-*s  %s\n" "$maxlen" "$display" "$info"
      done
      for f in "${files[@]}"; do
        name=$(basename -- "$f")
        display="${NBSP}$name"
        info=$(stat -c "%A %U %G %5s %y" -- "$f")
        printf "%-*s  %s\n" "$maxlen" "$display" "$info"
      done
    fi
  else
    file -- "$target"
    if command -v bat &>/dev/null; then
      bat --style=plain --color=always --paging=never --line-range=:40 "$target"
    else
      head -n 40 "$target" 2>/dev/null
    fi
  fi
'

    # –ó–±–∏—Ä–∞—î–º–æ —ñ–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤ (—É —Ç.—á. –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö)
    shopt -s nullglob dotglob
    ITEMS=( "$CURRENT_DIR"/* )
    shopt -u nullglob dotglob
	
    if [ ${#ITEMS[@]} -eq 0 ]; then
        LIST=$(
			printf "__HEADER__\t%-*.*s\t%12s\t%10s\n" \
			"$name_width" "$name_width" "Name" "Size" "Date"
			d="$CURRENT_DIR"
			name=".."
			display="/$name"
			size="<DIR>"
			mtime=$(date -r "$d" "+%Y-%m-%d %H:%M")
			printf "%s\t%-*.*s\t%12s\t%16s\n" \
			"$name" "$name_width" "$name_width" "$display" "$size" "$mtime"
		)
    else
        DIRS=()
        FILES=()
        for f in "${ITEMS[@]}"; do
          [ -e "$f" ] || continue
          if [ -d "$f" ]; then DIRS+=("$f"); else FILES+=("$f"); fi
        done
		
		# 1: raw name (—Å–ª—É–∂–±–æ–≤–µ) \t 2: display (–≥–Ω—É—á–∫–∞ —à–∏—Ä–∏–Ω–∞) \t 3: size \t 4: mtime
		LIST=$(
			printf "__HEADER__\t%-*.*s\t%12s\t%10s\n" \
			"$name_width" "$name_width" "Name" "Size" "Date"
			d="$CURRENT_DIR"
			name=".."
			display="/$name"
			size="<DIR>"
			mtime=$(date -r "$d" "+%Y-%m-%d %H:%M")
			printf "%s\t%-*.*s\t%12s\t%16s\n" \
			"$name" "$name_width" "$name_width" "$display" "$size" "$mtime"
			for d in "${DIRS[@]}"; do
				name=$(basename -- "$d")
				display="/$name"
				size="<DIR>"
				mtime=$(date -r "$d" "+%Y-%m-%d %H:%M")
				printf "%s\t%-*.*s\t%12s\t%16s\n" \
				"$name" "$name_width" "$name_width" "$display" "$size" "$mtime"
			done
			for f in "${FILES[@]}"; do
				name=$(basename -- "$f")
				display="${NBSP}$name"
				size=$(stat -c "%s" -- "$f" | numfmt --to=iec --suffix=B)
				mtime=$(date -r "$f" "+%Y-%m-%d %H:%M")
				printf "%s\t%-*.*s\t%12s\t%16s\n" \
				"$name" "$name_width" "$name_width" "$display" "$size" "$mtime"
			done
		)

    fi

    FZF_OPTS=(
        --multi
        --height=100%
        --reverse
        --ansi
        --prompt="üìÇ  $CURRENT_DIR > "
        --with-nth=2,3,4
        #--layout=reverse-list
        --expect=ctrl-f,ctrl-d,ctrl-q,ctrl-o,f2,ctrl-h,f1
        --bind "home:first"
        --bind "end:last"
		--header-lines=1
    )
	
	#[[ "${MULTIPANE:-0}" == "1" ]] && FZF_OPTS+=( --border )
	[[ "${MULTIPANE:-0}" != "1" ]] && FZF_OPTS+=( --preview="$FZF_PREVIEW" )
	
    mapfile -t OUT < <(
      {
        printf '%s\n' "$LIST"
      } | fzf "${FZF_OPTS[@]}"
    ) || exit 0

    (( ${#OUT[@]} == 0 )) && continue

    KEY="${OUT[0]}"
    SEL_LINES=("${OUT[@]:1}")

    # –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ
    if [[ "$KEY" == "ctrl-f" ]]; then
        read -rp "–ù–∞–∑–≤–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: " fname
        [ -n "$fname" ] && nano "$(realpath -m "$CURRENT_DIR/$fname")"
        continue
    elif [[ "$KEY" == "ctrl-d" ]]; then
        read -rp "–ù–∞–∑–≤–∞ –Ω–æ–≤–æ—ó –ø–∞–ø–∫–∏: " dname
        if [ -n "$dname" ]; then
            mkdir -p -- "$(realpath -m "$CURRENT_DIR/$dname")"
            echo "‚úî –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É $dname"
            read -rp "Enter..."
        fi
        continue
	elif [[ "$KEY" == "ctrl-h" || "$KEY" == "f1" ]]; then
		echo
		menu_header "‚å®Ô∏è  –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ"
		echo "‚Üë‚Üì / Enter   ‚Äì –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–∞ –≤–∏–±—ñ—Ä"
		echo "..           ‚Äì –ø—ñ–¥–Ω—è—Ç–∏—Å—å –Ω–∞ —Ä—ñ–≤–µ–Ω—å –≤–∏—â–µ"
		echo "Tab          ‚Äì –º—É–ª—å—Ç–∏–≤–∏–±—ñ—Ä"
		echo "F2 / Ctrl-O  ‚Äì –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é"
		echo "Ctrl-F       ‚Äì —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª"
		echo "Ctrl-D       ‚Äì —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–∞–ø–∫—É"
		echo "Ctrl-Q       ‚Äì –≤–∏—Ö—ñ–¥"
		echo
		read -rp "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è..."
		continue
    elif [[ "$KEY" == "ctrl-q" ]]; then
		if [[ "${MULTIPANE:-0}" == "1" ]]; then
			# –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—é —Å–µ—Å—ñ—é tmux
			tmux kill-session -t fileman
		else
			# –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏—Ö—ñ–¥
			exit 0
		fi
	fi

    # –Ü–º–µ–Ω–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    SELECTED=()
	for line in "${SEL_LINES[@]}"; do
		name="${line%%$'\t'*}"
		[[ "$name" == "__HEADER__" ]] && continue
		SELECTED+=("$name")
	done
    (( ${#SELECTED[@]} == 0 )) && continue

    # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Ä—ñ–≤–µ–Ω—å –≤–∏—â–µ
    if [[ "${SELECTED[0]}" == ".." ]]; then
        CURRENT_DIR=$(realpath -m "$(dirname -- "$CURRENT_DIR")")
        continue
    fi
	
	# –Ø–∫—â–æ –∫—ñ–ª—å–∫–∞ ‚Üí –º–∞—Å–æ–≤—ñ –¥—ñ—ó
    if [[ ${#SELECTED[@]} -gt 1 ]]; then
		
		el_label="–µ–ª–µ–º–µ–Ω—Ç—ñ–≤"
		(( ${#SELECTED[@]} < 5 )) && el_label="–µ–ª–µ–º–µ–Ω—Ç–∏"
		
		# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
		echo
		menu_header "üì¶  ${#SELECTED[@]} $el_label"
        echo "1) –ö–æ–ø—ñ—é–≤–∞—Ç–∏"
        echo "2) –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏"
		echo "3) –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        echo "4) –í–∏–¥–∞–ª–∏—Ç–∏"
        menu_nav
		
        while true; do

			echo
			read -rp "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: " action
			
			case "$action" in
				1) read -rp "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —É: " target
					for item in "${SELECTED[@]}"; do
						cp -r -i -- "$(realpath -m "$CURRENT_DIR/$item")" "$target"
					done
					echo "‚úî –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É $target"; read -rp "Enter..." ;;
				2) read -rp "–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —É: " target
					for item in "${SELECTED[@]}"; do
						mv -i -- "$(realpath -m "$CURRENT_DIR/$item")" "$target"
					done
					echo "‚úî –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É $target"; read -rp "Enter..." ;;
				3) echo
					if [[ -d "$FULL_PATH" ]]; then
						ls -ldh -- "$FULL_PATH"
						stat -- "$FULL_PATH"
						echo "–í–º—ñ—Å—Ç: $(ls -A "$FULL_PATH" | wc -l) –µ–ª–µ–º–µ–Ω—Ç(—ñ–≤)"
					else
						ls -lh -- "$FULL_PATH"
						stat -- "$FULL_PATH"
					fi
					read -rp "Enter..." ;;
				4) read -rp "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏? [y/N]: " confirm
					[[ "$confirm" =~ ^[Yy]$ ]] && for item in "${SELECTED[@]}"; do
						rm -rf -i -- "$(realpath -m "$CURRENT_DIR/$item")"
					done && echo "‚úî –í–∏–¥–∞–ª–µ–Ω–æ"
					read -rp "Enter..." ;;
				c) break ;;
				*) log_error "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä"; continue ;;
			esac
			
        done
		continue
    fi

    # –û–¥–∏–Ω —Ñ–∞–π–ª/–ø–∞–ø–∫–∞
    ITEM="${SELECTED[0]}"
    FULL_PATH=$(realpath -m "$CURRENT_DIR/$ITEM")

    if [[ -d "$FULL_PATH" ]]; then
        if [[ "$KEY" == "" ]]; then
            
			# Enter ‚Üí —É–≤—ñ–π—Ç–∏
            CURRENT_DIR="$FULL_PATH"
            continue
			
        elif [[ "$KEY" == "f2" || "$KEY" == "ctrl-o" ]]; then
            
			# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –ø–∞–ø–∫–∏
			echo
			menu_header "üìÇ  $FULL_PATH"
            echo "1) –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª"
            echo "2) –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É"
			echo "3) –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
            echo "4) –í–∏–¥–∞–ª–∏—Ç–∏"
            menu_nav
            
			while true; do
                
				echo
                read -rp "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: " action
                
				case "$action" in
                    1) read -rp "–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É: " fname
                       [ -n "$fname" ] && nano "$(realpath -m "$FULL_PATH/$fname")" ;;
                    2) read -rp "–ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏: " dname
                       [ -n "$dname" ] && mkdir -p "$(realpath -m "$FULL_PATH/$dname")" ;;
                    3) echo
						ls -ldh -- "$FULL_PATH"
						stat -- "$FULL_PATH"
						echo "–í–º—ñ—Å—Ç: $(ls -A "$FULL_PATH" | wc -l) –µ–ª–µ–º–µ–Ω—Ç(—ñ–≤)"
						read -rp "Enter..." ;;
					4) read -rp "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–ø–∫—É $FULL_PATH? [y/N]: " confirm
                       [[ "$confirm" =~ ^[Yy]$ ]] && rm -rf "$FULL_PATH" && echo "‚úî –í–∏–¥–∞–ª–µ–Ω–æ"
                       read -rp "Enter..." ; break ;;
                    c) break ;;
					*) log_error "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä"; continue ;;
                esac
            done
        fi
    else
        if [[ "$KEY" == "" ]]; then
            
			# Enter ‚Üí —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ–∞–π–ª
            nano "$FULL_PATH"
			
        elif [[ "$KEY" == "f2" || "$KEY" == "ctrl-o" ]]; then
            
			# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é —Ñ–∞–π–ª—É
			echo
            echo "üìÑ  $FULL_PATH"
            menu_divider
            echo "1) –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ ($PAGER_CMD)"
            echo "2) –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ (nano)"
            echo "3) –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (ls -lh)"
            echo "4) –ö–æ–ø—ñ—é–≤–∞—Ç–∏"
            echo "5) –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏"
            echo "6) –í–∏–¥–∞–ª–∏—Ç–∏"
            menu_nav
				
            while true; do
                
				echo
                read -rp "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: " action
                
				case "$action" in
                    1) $PAGER_CMD "$FULL_PATH" ;;
                    2) nano "$FULL_PATH" ;;
                    3) echo
						ls -lh -- "$FULL_PATH"
						stat -- "$FULL_PATH"
						read -rp "Enter..." ;;
                    4) read -rp "–ö—É–¥–∏ –∫–æ–ø—ñ—é–≤–∞—Ç–∏: " target
                       cp -i -- "$FULL_PATH" "$target"
                       echo "‚úî –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É $target"; read -rp "Enter..." ;;
                    5) read -rp "–ö—É–¥–∏ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏: " target
                       mv -i -- "$FULL_PATH" "$target"
                       echo "‚úî –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É $target"; read -rp "Enter..." ; break ;;
                    6) read -rp "–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª $FULL_PATH? [y/N]: " confirm
                       [[ "$confirm" =~ ^[Yy]$ ]] && rm -i -- "$FULL_PATH" && echo "‚úî –í–∏–¥–∞–ª–µ–Ω–æ"
                       read -rp "Enter..." ; break ;;
                    c) break ;;
					*) log_error "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä"; continue ;;
                esac
            done
        fi
    fi
done
